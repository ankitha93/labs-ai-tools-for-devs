/*
Docker Desktop tools API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oauthapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type ToolsApi interface {

	/*
		DeleteOAuthApp Unauthorizes an app.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param app
		@return ApiDeleteOAuthAppRequest
	*/
	DeleteOAuthApp(ctx context.Context, app string) ApiDeleteOAuthAppRequest

	// DeleteOAuthAppExecute executes the request
	DeleteOAuthAppExecute(r ApiDeleteOAuthAppRequest) (*http.Response, error)

	/*
		DeleteOAuthAppTool Remove a tool from an app.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param app
		@param tool
		@return ApiDeleteOAuthAppToolRequest
	*/
	DeleteOAuthAppTool(ctx context.Context, app string, tool string) ApiDeleteOAuthAppToolRequest

	// DeleteOAuthAppToolExecute executes the request
	DeleteOAuthAppToolExecute(r ApiDeleteOAuthAppToolRequest) (*http.Response, error)

	/*
		GetOAuthApp Returns an app object.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param app
		@return ApiGetOAuthAppRequest
	*/
	GetOAuthApp(ctx context.Context, app string) ApiGetOAuthAppRequest

	// GetOAuthAppExecute executes the request
	//  @return OAuthApp
	GetOAuthAppExecute(r ApiGetOAuthAppRequest) (*OAuthApp, *http.Response, error)

	/*
		ListOAuthApps Lists all app objects.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListOAuthAppsRequest
	*/
	ListOAuthApps(ctx context.Context) ApiListOAuthAppsRequest

	// ListOAuthAppsExecute executes the request
	//  @return []OAuthApp
	ListOAuthAppsExecute(r ApiListOAuthAppsRequest) ([]OAuthApp, *http.Response, error)

	/*
		PostOAuthApp Authorize an app.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param app
		@return ApiPostOAuthAppRequest
	*/
	PostOAuthApp(ctx context.Context, app string) ApiPostOAuthAppRequest

	// PostOAuthAppExecute executes the request
	//  @return AuthResponse
	PostOAuthAppExecute(r ApiPostOAuthAppRequest) (*AuthResponse, *http.Response, error)

	/*
		PostOAuthAppTool Add a tool to an app.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param app
		@param tool
		@return ApiPostOAuthAppToolRequest
	*/
	PostOAuthAppTool(ctx context.Context, app string, tool string) ApiPostOAuthAppToolRequest

	// PostOAuthAppToolExecute executes the request
	PostOAuthAppToolExecute(r ApiPostOAuthAppToolRequest) (*http.Response, error)
}

// ToolsApiService ToolsApi service
type ToolsApiService service

type ApiDeleteOAuthAppRequest struct {
	ctx        context.Context
	ApiService ToolsApi
	app        string
}

func (r ApiDeleteOAuthAppRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOAuthAppExecute(r)
}

/*
DeleteOAuthApp Unauthorizes an app.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app
	@return ApiDeleteOAuthAppRequest
*/
func (a *ToolsApiService) DeleteOAuthApp(ctx context.Context, app string) ApiDeleteOAuthAppRequest {
	return ApiDeleteOAuthAppRequest{
		ApiService: a,
		ctx:        ctx,
		app:        app,
	}
}

// Execute executes the request
func (a *ToolsApiService) DeleteOAuthAppExecute(r ApiDeleteOAuthAppRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.DeleteOAuthApp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterToString(r.app, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteOAuthAppToolRequest struct {
	ctx        context.Context
	ApiService ToolsApi
	app        string
	tool       string
}

func (r ApiDeleteOAuthAppToolRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOAuthAppToolExecute(r)
}

/*
DeleteOAuthAppTool Remove a tool from an app.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app
	@param tool
	@return ApiDeleteOAuthAppToolRequest
*/
func (a *ToolsApiService) DeleteOAuthAppTool(ctx context.Context, app string, tool string) ApiDeleteOAuthAppToolRequest {
	return ApiDeleteOAuthAppToolRequest{
		ApiService: a,
		ctx:        ctx,
		app:        app,
		tool:       tool,
	}
}

// Execute executes the request
func (a *ToolsApiService) DeleteOAuthAppToolExecute(r ApiDeleteOAuthAppToolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.DeleteOAuthAppTool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/{app}/tools/{tool}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterToString(r.app, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tool"+"}", url.PathEscape(parameterToString(r.tool, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOAuthAppRequest struct {
	ctx        context.Context
	ApiService ToolsApi
	app        string
}

func (r ApiGetOAuthAppRequest) Execute() (*OAuthApp, *http.Response, error) {
	return r.ApiService.GetOAuthAppExecute(r)
}

/*
GetOAuthApp Returns an app object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app
	@return ApiGetOAuthAppRequest
*/
func (a *ToolsApiService) GetOAuthApp(ctx context.Context, app string) ApiGetOAuthAppRequest {
	return ApiGetOAuthAppRequest{
		ApiService: a,
		ctx:        ctx,
		app:        app,
	}
}

// Execute executes the request
//
//	@return OAuthApp
func (a *ToolsApiService) GetOAuthAppExecute(r ApiGetOAuthAppRequest) (*OAuthApp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OAuthApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.GetOAuthApp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterToString(r.app, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOAuthAppsRequest struct {
	ctx        context.Context
	ApiService ToolsApi
}

func (r ApiListOAuthAppsRequest) Execute() ([]OAuthApp, *http.Response, error) {
	return r.ApiService.ListOAuthAppsExecute(r)
}

/*
ListOAuthApps Lists all app objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListOAuthAppsRequest
*/
func (a *ToolsApiService) ListOAuthApps(ctx context.Context) ApiListOAuthAppsRequest {
	return ApiListOAuthAppsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OAuthApp
func (a *ToolsApiService) ListOAuthAppsExecute(r ApiListOAuthAppsRequest) ([]OAuthApp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OAuthApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.ListOAuthApps")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostOAuthAppRequest struct {
	ctx        context.Context
	ApiService ToolsApi
	app        string
	scopes     *string
}

func (r ApiPostOAuthAppRequest) Scopes(scopes string) ApiPostOAuthAppRequest {
	r.scopes = &scopes
	return r
}

func (r ApiPostOAuthAppRequest) Execute() (*AuthResponse, *http.Response, error) {
	return r.ApiService.PostOAuthAppExecute(r)
}

/*
PostOAuthApp Authorize an app.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app
	@return ApiPostOAuthAppRequest
*/
func (a *ToolsApiService) PostOAuthApp(ctx context.Context, app string) ApiPostOAuthAppRequest {
	return ApiPostOAuthAppRequest{
		ApiService: a,
		ctx:        ctx,
		app:        app,
	}
}

// Execute executes the request
//
//	@return AuthResponse
func (a *ToolsApiService) PostOAuthAppExecute(r ApiPostOAuthAppRequest) (*AuthResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.PostOAuthApp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterToString(r.app, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scopes != nil {
		localVarQueryParams.Add("scopes", parameterToString(*r.scopes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v AuthResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostOAuthAppToolRequest struct {
	ctx        context.Context
	ApiService ToolsApi
	app        string
	tool       string
}

func (r ApiPostOAuthAppToolRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostOAuthAppToolExecute(r)
}

/*
PostOAuthAppTool Add a tool to an app.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app
	@param tool
	@return ApiPostOAuthAppToolRequest
*/
func (a *ToolsApiService) PostOAuthAppTool(ctx context.Context, app string, tool string) ApiPostOAuthAppToolRequest {
	return ApiPostOAuthAppToolRequest{
		ApiService: a,
		ctx:        ctx,
		app:        app,
		tool:       tool,
	}
}

// Execute executes the request
func (a *ToolsApiService) PostOAuthAppToolExecute(r ApiPostOAuthAppToolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsApiService.PostOAuthAppTool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/{app}/tools/{tool}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterToString(r.app, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tool"+"}", url.PathEscape(parameterToString(r.tool, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
