/*
Docker Desktop tools API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oauthapi

import (
	"encoding/json"
)

// OAuthApp struct for OAuthApp
type OAuthApp struct {
	App        string        `json:"app"`
	Tools      []string      `json:"tools"`
	Authorized bool          `json:"authorized"`
	Provider   string        `json:"provider"`
	Scopes     []OAuthScopes `json:"scopes,omitempty"`
}

// NewOAuthApp instantiates a new OAuthApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthApp(app string, tools []string, authorized bool, provider string) *OAuthApp {
	this := OAuthApp{}
	this.App = app
	this.Tools = tools
	this.Authorized = authorized
	this.Provider = provider
	return &this
}

// NewOAuthAppWithDefaults instantiates a new OAuthApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthAppWithDefaults() *OAuthApp {
	this := OAuthApp{}
	return &this
}

// GetApp returns the App field value
func (o *OAuthApp) GetApp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *OAuthApp) GetAppOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *OAuthApp) SetApp(v string) {
	o.App = v
}

// GetTools returns the Tools field value
func (o *OAuthApp) GetTools() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value
// and a boolean to check if the value has been set.
func (o *OAuthApp) GetToolsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tools, true
}

// SetTools sets field value
func (o *OAuthApp) SetTools(v []string) {
	o.Tools = v
}

// GetAuthorized returns the Authorized field value
func (o *OAuthApp) GetAuthorized() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Authorized
}

// GetAuthorizedOk returns a tuple with the Authorized field value
// and a boolean to check if the value has been set.
func (o *OAuthApp) GetAuthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authorized, true
}

// SetAuthorized sets field value
func (o *OAuthApp) SetAuthorized(v bool) {
	o.Authorized = v
}

// GetProvider returns the Provider field value
func (o *OAuthApp) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *OAuthApp) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *OAuthApp) SetProvider(v string) {
	o.Provider = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *OAuthApp) GetScopes() []OAuthScopes {
	if o == nil || o.Scopes == nil {
		var ret []OAuthScopes
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApp) GetScopesOk() ([]OAuthScopes, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *OAuthApp) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []OAuthScopes and assigns it to the Scopes field.
func (o *OAuthApp) SetScopes(v []OAuthScopes) {
	o.Scopes = v
}

func (o OAuthApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app"] = o.App
	}
	if true {
		toSerialize["tools"] = o.Tools
	}
	if true {
		toSerialize["authorized"] = o.Authorized
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthApp struct {
	value *OAuthApp
	isSet bool
}

func (v NullableOAuthApp) Get() *OAuthApp {
	return v.value
}

func (v *NullableOAuthApp) Set(val *OAuthApp) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthApp) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthApp(val *OAuthApp) *NullableOAuthApp {
	return &NullableOAuthApp{value: val, isSet: true}
}

func (v NullableOAuthApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
