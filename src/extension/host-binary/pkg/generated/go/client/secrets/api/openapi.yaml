openapi: 3.0.3
info:
  description: This Docker Desktop API manages user secrets to be injected in containers.
  title: Docker Desktop secrets API
  version: 0.0.0
  x-redocly-package-name: secrets
servers:
- url: /
tags:
- name: secrets
paths:
  /secrets:
    get:
      operationId: listJfsSecrets
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoredSecret'
                type: array
          description: success
        "500":
          description: unexpected error
      summary: lists all secrets
      tags:
      - secrets
    post:
      operationId: setJfsSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: the secret to be set
        required: true
      responses:
        "200":
          description: success
        "500":
          description: unexpected error
      summary: sets a secret value
      tags:
      - secrets
  /secrets/{secret}:
    delete:
      operationId: deleteJfsSecret
      parameters:
      - explode: false
        in: path
        name: secret
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: success
        "500":
          description: unexpected error
      summary: deletes a secret
      tags:
      - secrets
    get:
      operationId: getJfsSecret
      parameters:
      - explode: false
        in: path
        name: secret
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: success
        "404":
          description: secret not found
      summary: checks if a secret exists
      tags:
      - secrets
  /policies:
    get:
      operationId: listJfsPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Policy'
                type: array
          description: success
        "500":
          description: unexpected error
      summary: lists all policies
      tags:
      - secrets
    post:
      operationId: setJfsPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        description: the policy to be set
        required: true
      responses:
        "200":
          description: success
        "500":
          description: unexpected error
      summary: sets the policy
      tags:
      - secrets
  /policies/{policy}:
    delete:
      operationId: deleteJfsPolicy
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: success
        "500":
          description: unexpected error
      summary: deletes a policy
      tags:
      - secrets
    get:
      operationId: getJfsPolicy
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: success
        "404":
          description: policy not found
      summary: retrieves a policy
      tags:
      - secrets
components:
  schemas:
    Secret:
      example:
        name: name
        policies:
        - policies
        - policies
        value: value
      properties:
        name:
          description: the name of the secret
          type: string
        value:
          description: the value of the secret
          type: string
        policies:
          description: the list of policy names associated with the secret
          items:
            type: string
          type: array
      required:
      - name
      - value
      type: object
    StoredSecret:
      example:
        name: name
        policies:
        - policies
        - policies
      properties:
        name:
          description: the name of the secret
          type: string
        policies:
          description: the list of policy names associated with the secret
          items:
            type: string
          type: array
      required:
      - name
      - policies
      type: object
    Policy:
      example:
        images:
        - images
        - images
        name: name
      properties:
        name:
          description: the name of the policy
          type: string
        images:
          description: the list of images allowed by the policy
          items:
            type: string
          type: array
      required:
      - name
      type: object
